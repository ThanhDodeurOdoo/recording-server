// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod ws_api {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CONTENT: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CONTENT: u8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CONTENT: [Content; 4] = [
  Content::NONE,
  Content::RecordingPayload,
  Content::TranscriptionPayload,
  Content::RtcPayload,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Content(pub u8);
#[allow(non_upper_case_globals)]
impl Content {
  pub const NONE: Self = Self(0);
  pub const RecordingPayload: Self = Self(1);
  pub const TranscriptionPayload: Self = Self(2);
  pub const RtcPayload: Self = Self(3);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::RecordingPayload,
    Self::TranscriptionPayload,
    Self::RtcPayload,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::RecordingPayload => Some("RecordingPayload"),
      Self::TranscriptionPayload => Some("TranscriptionPayload"),
      Self::RtcPayload => Some("RtcPayload"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Content {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Content {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Content {
    type Output = Content;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Content {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Content {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Content {}
pub struct ContentUnionTableOffset {}

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ACTION: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ACTION: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ACTION: [Action; 3] = [
  Action::start_recording,
  Action::start_transcript,
  Action::create_rtc_transport,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Action(pub i8);
#[allow(non_upper_case_globals)]
impl Action {
  pub const start_recording: Self = Self(0);
  pub const start_transcript: Self = Self(1);
  pub const create_rtc_transport: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::start_recording,
    Self::start_transcript,
    Self::create_rtc_transport,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::start_recording => Some("start_recording"),
      Self::start_transcript => Some("start_transcript"),
      Self::create_rtc_transport => Some("create_rtc_transport"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Action {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Action {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Action {
    type Output = Action;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Action {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Action {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Action {}
pub enum MediaSourceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MediaSource<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MediaSource<'a> {
  type Inner = MediaSource<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MediaSource<'a> {
  pub const VT_CLOCK_RATE: flatbuffers::VOffsetT = 4;
  pub const VT_CODEC: flatbuffers::VOffsetT = 6;
  pub const VT_LABEL: flatbuffers::VOffsetT = 8;
  pub const VT_PORT: flatbuffers::VOffsetT = 10;
  pub const VT_PAYLOAD_TYPE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MediaSource { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MediaSourceArgs<'args>
  ) -> flatbuffers::WIPOffset<MediaSource<'bldr>> {
    let mut builder = MediaSourceBuilder::new(_fbb);
    if let Some(x) = args.label { builder.add_label(x); }
    if let Some(x) = args.codec { builder.add_codec(x); }
    builder.add_clock_rate(args.clock_rate);
    builder.add_port(args.port);
    builder.add_payload_type(args.payload_type);
    builder.finish()
  }


  #[inline]
  pub fn clock_rate(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(MediaSource::VT_CLOCK_RATE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn codec(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MediaSource::VT_CODEC, None).unwrap()}
  }
  #[inline]
  pub fn label(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MediaSource::VT_LABEL, None).unwrap()}
  }
  #[inline]
  pub fn port(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(MediaSource::VT_PORT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn payload_type(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(MediaSource::VT_PAYLOAD_TYPE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MediaSource<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("clock_rate", Self::VT_CLOCK_RATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("codec", Self::VT_CODEC, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("label", Self::VT_LABEL, true)?
     .visit_field::<u16>("port", Self::VT_PORT, false)?
     .visit_field::<u8>("payload_type", Self::VT_PAYLOAD_TYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct MediaSourceArgs<'a> {
    pub clock_rate: u32,
    pub codec: Option<flatbuffers::WIPOffset<&'a str>>,
    pub label: Option<flatbuffers::WIPOffset<&'a str>>,
    pub port: u16,
    pub payload_type: u8,
}
impl<'a> Default for MediaSourceArgs<'a> {
  #[inline]
  fn default() -> Self {
    MediaSourceArgs {
      clock_rate: 0,
      codec: None, // required field
      label: None, // required field
      port: 0,
      payload_type: 0,
    }
  }
}

pub struct MediaSourceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MediaSourceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_clock_rate(&mut self, clock_rate: u32) {
    self.fbb_.push_slot::<u32>(MediaSource::VT_CLOCK_RATE, clock_rate, 0);
  }
  #[inline]
  pub fn add_codec(&mut self, codec: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MediaSource::VT_CODEC, codec);
  }
  #[inline]
  pub fn add_label(&mut self, label: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MediaSource::VT_LABEL, label);
  }
  #[inline]
  pub fn add_port(&mut self, port: u16) {
    self.fbb_.push_slot::<u16>(MediaSource::VT_PORT, port, 0);
  }
  #[inline]
  pub fn add_payload_type(&mut self, payload_type: u8) {
    self.fbb_.push_slot::<u8>(MediaSource::VT_PAYLOAD_TYPE, payload_type, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MediaSourceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MediaSourceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MediaSource<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, MediaSource::VT_CODEC,"codec");
    self.fbb_.required(o, MediaSource::VT_LABEL,"label");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MediaSource<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MediaSource");
      ds.field("clock_rate", &self.clock_rate());
      ds.field("codec", &self.codec());
      ds.field("label", &self.label());
      ds.field("port", &self.port());
      ds.field("payload_type", &self.payload_type());
      ds.finish()
  }
}
pub enum MediaSourcesOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MediaSources<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MediaSources<'a> {
  type Inner = MediaSources<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MediaSources<'a> {
  pub const VT_AUDIO: flatbuffers::VOffsetT = 4;
  pub const VT_CAMERA: flatbuffers::VOffsetT = 6;
  pub const VT_SCREEN: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MediaSources { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MediaSourcesArgs<'args>
  ) -> flatbuffers::WIPOffset<MediaSources<'bldr>> {
    let mut builder = MediaSourcesBuilder::new(_fbb);
    if let Some(x) = args.screen { builder.add_screen(x); }
    if let Some(x) = args.camera { builder.add_camera(x); }
    if let Some(x) = args.audio { builder.add_audio(x); }
    builder.finish()
  }


  #[inline]
  pub fn audio(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource>>>>(MediaSources::VT_AUDIO, None).unwrap()}
  }
  #[inline]
  pub fn camera(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource>>>>(MediaSources::VT_CAMERA, None).unwrap()}
  }
  #[inline]
  pub fn screen(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource>>>>(MediaSources::VT_SCREEN, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for MediaSources<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MediaSource>>>>("audio", Self::VT_AUDIO, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MediaSource>>>>("camera", Self::VT_CAMERA, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MediaSource>>>>("screen", Self::VT_SCREEN, true)?
     .finish();
    Ok(())
  }
}
pub struct MediaSourcesArgs<'a> {
    pub audio: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource<'a>>>>>,
    pub camera: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource<'a>>>>>,
    pub screen: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource<'a>>>>>,
}
impl<'a> Default for MediaSourcesArgs<'a> {
  #[inline]
  fn default() -> Self {
    MediaSourcesArgs {
      audio: None, // required field
      camera: None, // required field
      screen: None, // required field
    }
  }
}

pub struct MediaSourcesBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MediaSourcesBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_audio(&mut self, audio: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MediaSource<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MediaSources::VT_AUDIO, audio);
  }
  #[inline]
  pub fn add_camera(&mut self, camera: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MediaSource<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MediaSources::VT_CAMERA, camera);
  }
  #[inline]
  pub fn add_screen(&mut self, screen: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MediaSource<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MediaSources::VT_SCREEN, screen);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MediaSourcesBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MediaSourcesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MediaSources<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, MediaSources::VT_AUDIO,"audio");
    self.fbb_.required(o, MediaSources::VT_CAMERA,"camera");
    self.fbb_.required(o, MediaSources::VT_SCREEN,"screen");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MediaSources<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MediaSources");
      ds.field("audio", &self.audio());
      ds.field("camera", &self.camera());
      ds.field("screen", &self.screen());
      ds.finish()
  }
}
pub enum RecordingPayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RecordingPayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RecordingPayload<'a> {
  type Inner = RecordingPayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RecordingPayload<'a> {
  pub const VT_MEDIA_SOURCES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RecordingPayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RecordingPayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<RecordingPayload<'bldr>> {
    let mut builder = RecordingPayloadBuilder::new(_fbb);
    if let Some(x) = args.media_sources { builder.add_media_sources(x); }
    builder.finish()
  }


  #[inline]
  pub fn media_sources(&self) -> MediaSources<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<MediaSources>>(RecordingPayload::VT_MEDIA_SOURCES, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for RecordingPayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<MediaSources>>("media_sources", Self::VT_MEDIA_SOURCES, true)?
     .finish();
    Ok(())
  }
}
pub struct RecordingPayloadArgs<'a> {
    pub media_sources: Option<flatbuffers::WIPOffset<MediaSources<'a>>>,
}
impl<'a> Default for RecordingPayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    RecordingPayloadArgs {
      media_sources: None, // required field
    }
  }
}

pub struct RecordingPayloadBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RecordingPayloadBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_media_sources(&mut self, media_sources: flatbuffers::WIPOffset<MediaSources<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<MediaSources>>(RecordingPayload::VT_MEDIA_SOURCES, media_sources);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RecordingPayloadBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RecordingPayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RecordingPayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, RecordingPayload::VT_MEDIA_SOURCES,"media_sources");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RecordingPayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RecordingPayload");
      ds.field("media_sources", &self.media_sources());
      ds.finish()
  }
}
pub enum TranscriptionPayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TranscriptionPayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TranscriptionPayload<'a> {
  type Inner = TranscriptionPayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TranscriptionPayload<'a> {
  pub const VT_AUDIO_SOURCES: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TranscriptionPayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TranscriptionPayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<TranscriptionPayload<'bldr>> {
    let mut builder = TranscriptionPayloadBuilder::new(_fbb);
    if let Some(x) = args.audio_sources { builder.add_audio_sources(x); }
    builder.finish()
  }


  #[inline]
  pub fn audio_sources(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource>>>>(TranscriptionPayload::VT_AUDIO_SOURCES, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for TranscriptionPayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MediaSource>>>>("audio_sources", Self::VT_AUDIO_SOURCES, true)?
     .finish();
    Ok(())
  }
}
pub struct TranscriptionPayloadArgs<'a> {
    pub audio_sources: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MediaSource<'a>>>>>,
}
impl<'a> Default for TranscriptionPayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    TranscriptionPayloadArgs {
      audio_sources: None, // required field
    }
  }
}

pub struct TranscriptionPayloadBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TranscriptionPayloadBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_audio_sources(&mut self, audio_sources: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MediaSource<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TranscriptionPayload::VT_AUDIO_SOURCES, audio_sources);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TranscriptionPayloadBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TranscriptionPayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TranscriptionPayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, TranscriptionPayload::VT_AUDIO_SOURCES,"audio_sources");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TranscriptionPayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TranscriptionPayload");
      ds.field("audio_sources", &self.audio_sources());
      ds.finish()
  }
}
pub enum RtcPayloadOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RtcPayload<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RtcPayload<'a> {
  type Inner = RtcPayload<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RtcPayload<'a> {
  pub const VT_TRANSPORT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_ICE_PARAMETERS: flatbuffers::VOffsetT = 6;
  pub const VT_ICE_CANDIDATES: flatbuffers::VOffsetT = 8;
  pub const VT_DTLS_PARAMETERS: flatbuffers::VOffsetT = 10;
  pub const VT_SCTP_PARAMETERS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RtcPayload { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RtcPayloadArgs<'args>
  ) -> flatbuffers::WIPOffset<RtcPayload<'bldr>> {
    let mut builder = RtcPayloadBuilder::new(_fbb);
    if let Some(x) = args.sctp_parameters { builder.add_sctp_parameters(x); }
    if let Some(x) = args.dtls_parameters { builder.add_dtls_parameters(x); }
    if let Some(x) = args.ice_candidates { builder.add_ice_candidates(x); }
    if let Some(x) = args.ice_parameters { builder.add_ice_parameters(x); }
    if let Some(x) = args.transport_id { builder.add_transport_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn transport_id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RtcPayload::VT_TRANSPORT_ID, None).unwrap()}
  }
  #[inline]
  pub fn ice_parameters(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RtcPayload::VT_ICE_PARAMETERS, None).unwrap()}
  }
  #[inline]
  pub fn ice_candidates(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RtcPayload::VT_ICE_CANDIDATES, None).unwrap()}
  }
  #[inline]
  pub fn dtls_parameters(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RtcPayload::VT_DTLS_PARAMETERS, None).unwrap()}
  }
  #[inline]
  pub fn sctp_parameters(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RtcPayload::VT_SCTP_PARAMETERS, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for RtcPayload<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("transport_id", Self::VT_TRANSPORT_ID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ice_parameters", Self::VT_ICE_PARAMETERS, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ice_candidates", Self::VT_ICE_CANDIDATES, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dtls_parameters", Self::VT_DTLS_PARAMETERS, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sctp_parameters", Self::VT_SCTP_PARAMETERS, true)?
     .finish();
    Ok(())
  }
}
pub struct RtcPayloadArgs<'a> {
    pub transport_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ice_parameters: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ice_candidates: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dtls_parameters: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sctp_parameters: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for RtcPayloadArgs<'a> {
  #[inline]
  fn default() -> Self {
    RtcPayloadArgs {
      transport_id: None, // required field
      ice_parameters: None, // required field
      ice_candidates: None, // required field
      dtls_parameters: None, // required field
      sctp_parameters: None, // required field
    }
  }
}

pub struct RtcPayloadBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RtcPayloadBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_transport_id(&mut self, transport_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RtcPayload::VT_TRANSPORT_ID, transport_id);
  }
  #[inline]
  pub fn add_ice_parameters(&mut self, ice_parameters: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RtcPayload::VT_ICE_PARAMETERS, ice_parameters);
  }
  #[inline]
  pub fn add_ice_candidates(&mut self, ice_candidates: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RtcPayload::VT_ICE_CANDIDATES, ice_candidates);
  }
  #[inline]
  pub fn add_dtls_parameters(&mut self, dtls_parameters: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RtcPayload::VT_DTLS_PARAMETERS, dtls_parameters);
  }
  #[inline]
  pub fn add_sctp_parameters(&mut self, sctp_parameters: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RtcPayload::VT_SCTP_PARAMETERS, sctp_parameters);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RtcPayloadBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RtcPayloadBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RtcPayload<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, RtcPayload::VT_TRANSPORT_ID,"transport_id");
    self.fbb_.required(o, RtcPayload::VT_ICE_PARAMETERS,"ice_parameters");
    self.fbb_.required(o, RtcPayload::VT_ICE_CANDIDATES,"ice_candidates");
    self.fbb_.required(o, RtcPayload::VT_DTLS_PARAMETERS,"dtls_parameters");
    self.fbb_.required(o, RtcPayload::VT_SCTP_PARAMETERS,"sctp_parameters");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RtcPayload<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RtcPayload");
      ds.field("transport_id", &self.transport_id());
      ds.field("ice_parameters", &self.ice_parameters());
      ds.field("ice_candidates", &self.ice_candidates());
      ds.field("dtls_parameters", &self.dtls_parameters());
      ds.field("sctp_parameters", &self.sctp_parameters());
      ds.finish()
  }
}
pub enum MessageOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Message<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Message<'a> {
  type Inner = Message<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Message<'a> {
  pub const VT_ACTION: flatbuffers::VOffsetT = 4;
  pub const VT_CHANNEL_UUID: flatbuffers::VOffsetT = 6;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 8;
  pub const VT_CONTENT_TYPE: flatbuffers::VOffsetT = 10;
  pub const VT_CONTENT: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Message { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MessageArgs<'args>
  ) -> flatbuffers::WIPOffset<Message<'bldr>> {
    let mut builder = MessageBuilder::new(_fbb);
    if let Some(x) = args.content { builder.add_content(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.channel_uuid { builder.add_channel_uuid(x); }
    builder.add_content_type(args.content_type);
    builder.add_action(args.action);
    builder.finish()
  }


  #[inline]
  pub fn action(&self) -> Action {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Action>(Message::VT_ACTION, Some(Action::start_recording)).unwrap()}
  }
  #[inline]
  pub fn channel_uuid(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Message::VT_CHANNEL_UUID, None).unwrap()}
  }
  #[inline]
  pub fn origin(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Message::VT_ORIGIN, None).unwrap()}
  }
  #[inline]
  pub fn content_type(&self) -> Content {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Content>(Message::VT_CONTENT_TYPE, Some(Content::NONE)).unwrap()}
  }
  #[inline]
  pub fn content(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Message::VT_CONTENT, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn content_as_recording_payload(&self) -> Option<RecordingPayload<'a>> {
    if self.content_type() == Content::RecordingPayload {
      self.content().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { RecordingPayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn content_as_transcription_payload(&self) -> Option<TranscriptionPayload<'a>> {
    if self.content_type() == Content::TranscriptionPayload {
      self.content().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { TranscriptionPayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn content_as_rtc_payload(&self) -> Option<RtcPayload<'a>> {
    if self.content_type() == Content::RtcPayload {
      self.content().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { RtcPayload::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Message<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Action>("action", Self::VT_ACTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("channel_uuid", Self::VT_CHANNEL_UUID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, true)?
     .visit_union::<Content, _>("content_type", Self::VT_CONTENT_TYPE, "content", Self::VT_CONTENT, false, |key, v, pos| {
        match key {
          Content::RecordingPayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<RecordingPayload>>("Content::RecordingPayload", pos),
          Content::TranscriptionPayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<TranscriptionPayload>>("Content::TranscriptionPayload", pos),
          Content::RtcPayload => v.verify_union_variant::<flatbuffers::ForwardsUOffset<RtcPayload>>("Content::RtcPayload", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct MessageArgs<'a> {
    pub action: Action,
    pub channel_uuid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub content_type: Content,
    pub content: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for MessageArgs<'a> {
  #[inline]
  fn default() -> Self {
    MessageArgs {
      action: Action::start_recording,
      channel_uuid: None, // required field
      origin: None, // required field
      content_type: Content::NONE,
      content: None,
    }
  }
}

pub struct MessageBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MessageBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_action(&mut self, action: Action) {
    self.fbb_.push_slot::<Action>(Message::VT_ACTION, action, Action::start_recording);
  }
  #[inline]
  pub fn add_channel_uuid(&mut self, channel_uuid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Message::VT_CHANNEL_UUID, channel_uuid);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Message::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_content_type(&mut self, content_type: Content) {
    self.fbb_.push_slot::<Content>(Message::VT_CONTENT_TYPE, content_type, Content::NONE);
  }
  #[inline]
  pub fn add_content(&mut self, content: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Message::VT_CONTENT, content);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MessageBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Message<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Message::VT_CHANNEL_UUID,"channel_uuid");
    self.fbb_.required(o, Message::VT_ORIGIN,"origin");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Message<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Message");
      ds.field("action", &self.action());
      ds.field("channel_uuid", &self.channel_uuid());
      ds.field("origin", &self.origin());
      ds.field("content_type", &self.content_type());
      match self.content_type() {
        Content::RecordingPayload => {
          if let Some(x) = self.content_as_recording_payload() {
            ds.field("content", &x)
          } else {
            ds.field("content", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Content::TranscriptionPayload => {
          if let Some(x) = self.content_as_transcription_payload() {
            ds.field("content", &x)
          } else {
            ds.field("content", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Content::RtcPayload => {
          if let Some(x) = self.content_as_rtc_payload() {
            ds.field("content", &x)
          } else {
            ds.field("content", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("content", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Message`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_message_unchecked`.
pub fn root_as_message(buf: &[u8]) -> Result<Message, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Message>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Message` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_message_unchecked`.
pub fn size_prefixed_root_as_message(buf: &[u8]) -> Result<Message, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Message>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Message` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_message_unchecked`.
pub fn root_as_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Message<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Message<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Message` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_message_unchecked`.
pub fn size_prefixed_root_as_message_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Message<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Message<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Message and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Message`.
pub unsafe fn root_as_message_unchecked(buf: &[u8]) -> Message {
  flatbuffers::root_unchecked::<Message>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Message and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Message`.
pub unsafe fn size_prefixed_root_as_message_unchecked(buf: &[u8]) -> Message {
  flatbuffers::size_prefixed_root_unchecked::<Message>(buf)
}
#[inline]
pub fn finish_message_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Message<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_message_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Message<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod ws_api

